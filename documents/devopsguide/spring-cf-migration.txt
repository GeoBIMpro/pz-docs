## Spring Cloud Foundry Migration and Implementation

Begin by reading the [DevOps Wiki Page](https://github.com/venicegeo/venice/blob/master/docs/devops.md#services) for introductory information on the Cloud Foundry environment. 

The purpose of this wiki page is to document how a Spring Boot application can be deployed on the Pivotal Cloud Foundry instance, and what sorts of configuration settings should be applied in order to properly define service requirements, and to read from Cloud Foundry configuration. 

## Manifests

### Domain

Previously `manifest.yml` stored the information on the CF deployment with a single domain; however we now have two. The recommended approach here is to create two manifest files. `manifest.local.yml` and `manifest.jenkins.yml`. These two manifests will be identical except for the `domain` property. `manifest.local.yml` should deploy to the `test.geointservices.io` domain and `manifest.jenkins.yml` should deploy to the `stage.geointservices.io` domain.

Jenkins will call the appropriate domain when building. 

### VCAP Services

See [VCAP Services](https://github.com/venicegeo/venice/blob/master/docs/devops.md#services) for details. This boils down to adding lines in your `manifest.*.yml` to point to the services you wish to reference. Referencing services is required to later pull in the Spring `vcap.services.*` configuration variables.

## Maven

### Job Common Dependency

The Job Common dependency has changed. It is no longer located in the S3 Maven Repo. It is now located in the Nexus repo. Remove all references to the old Maven S3 repository. Add a new reference to the Nexus repository.

```
<repository>
   <id>nexus</id>
   <url>https://nexus.devops.geointservices.io/content/repositories/Piazza/</url>
</repository>
```

Update the `pz-jobcommon` dependency.

```
<dependency>
   <groupId>io.piazzageo</groupId>
   <artifactId>pz-jobcommon</artifactId>
   <version>LATEST</version>
</dependency>
```

Credentials for the Nexus repository must be established in your `%M2_HOME%/conf/settings.xml` file. Add a new `<server>` entry.

```
<server>
  <id>nexus</id>
  <username>YOUR_USERNAME</username>
  <password>YOUR_PASSWORD</password>
</server>
```

## Spring Configuration Changes

### VCAP Services

See introductory information on the `VCAP_SERVICES` env variable [here](http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.html). This is how you will read service-specific configuration information, such as sensitive credentials, into your application. 

Spring contains a [VCAP Services Listener](http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/cloud/CloudFoundryVcapEnvironmentPostProcessor.html) that will look for the `VCAP_SERVICES` environment variable upon startup. This is automatically enabled under our `spring-boot` starter project. As the API Docs state, the Processor will parse the `VCAP_SERVICES` and turn it into a flat structure of configuration properties that can be read from. 

For example. If your `VCAP_SERVICES` environment variable reads:

```
{
    "user-provided": [
     {
      "credentials": {
       "bucket": "pz-blobstore-staging"
      },
      "label": "user-provided",
      "name": "pz-blobstore",
      "syslog_drain_url": "",
      "tags": []
     }
    ]
   }
```

Then the PostProcessor will parse through the JSON tree. It will then flatten all `string` values into configuration properties under the `vcap.services.*` values. For example, if you wanted to read the `bucket` name in the above `VCAP_SERVICES`, you would reference as such:

```
@Value("${vcap.services.pz-blobstore.credentials.bucket}")
```

Nothing additional is necessary.

In order to support local development, in cases where the `VCAP_SERVICES` is not injected into the environment, then you can provide a default value in the `@Value` binding. 

```
@Value("${vcap.services.pz-blobstore.credentials.bucket:DEFAULT_VALUE}")
```

Alternatively, in a local development environment where the developer will have a `VCAP_SERVICES` environment variable, it is also fine to insert the `vcap.services.*` into the local `application.properties` file. These values will be overridden in the Cloud Foundry deployment - so it is an acceptable place for debug values.

```
vcap.services.pz-blobstore.credentials.bucket=TEST_VALUE
```

## Directory Cleanup

The `scripts/` directory can be safely removed, once fully migrated to the new PCF. The new `ci/` directory will contain all relevant information. 

### Maven Build

*Important*: If using `mvn clean package` in your `ci/archive.sh` file, then this command must be changed to `mvn clean package -U`, or else old `pz-jobcommon` artifacts may be pulled upon build. 
