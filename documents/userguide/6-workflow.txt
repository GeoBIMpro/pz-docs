# Workflow Service

Piazza provides the ability for users to define and send an _event_, representing some "thing" that has happened. These events can be issued either from within Piazza or by an external client. Piazza also allows for users to define _triggers_, containing both an event-condition and an action: when the condition is met, the action is performed. Taken together, event types, events, and triggers can be used to define _workflows_.


## The EventType

The user first defines an event type that is the "schema" for the Events that the user will be generating. The event type object is sent in a `POST` request to the `/eventType` endpoint and contains contains a unique `name` (string) and a mapping describing the EventType's parameters. For example:

[source,json]
----
{
    "name": "testevent-1468849135",
    "mapping": {
        "filename": "string",
        "code":     "string",
        "severity": "integer"
    }
}
----

The `name` must be unique across all event types in the system. Our practice is to use a namespace prefix, followed by colon (`:`), before the name.

The available data types are `string`, `boolean`, `integer`, `double`, `date`, `float`, `byte`, `short`, and `long`. By no coincidence, these are the basic types that Elasticsearch supports.

This script shows an example of registering an EventType.

link:scripts/7-eventtype.sh[7-eventtype.sh]
[source,bash]
----
include::scripts/7-eventtype.sh[tags=public]
----

Note we use the current date/time to generate a unique id.

Run the script simply as:

    $ ./7-eventtype.sh


### System EventTypes

Piazza provides some system level event types: `piazza:ingest` and `piazza:executionComplete`.  These two system event types can be used to set up triggers that execute something is ingested or an execution has finished. Those two event types look like the following:

[source,json]
----
"piazza:ingest" : {
  "dataId":   "string",
  "dataType": "string",
  "epsg":     "short",
  "minX":     "long",
  "minY":     "long",
  "maxX":     "long",
  "maxY":     "long",
  "hosted":   "boolean",
}
----

and

[source,json]
----
"piazza:executionComplete" : {
  "jobId":    "string",
  "status":   "string",
  "dataId":   "string",
}
----

An event of type `piazza:ingest` will be automatically `POST`ed by the system after a file or image is loaded into Piazza.

An event of type `piazza:executionComplete` will be automatically `POST`ed by the system when the User Service Registry completes an execution of a service.

To use these system events, look up the event type id for the system event type with the `/eventType?name=NAME`, where `NAME` is the event type name. The return data value will be an array with a single event type in it. You can get the event type id from the event type that is returned, and create your trigger with that event type id.


## The Trigger

Given an event type, the user next defines a trigger to define what action is to be taken when a specific event occurs. The trigger is sent as a `POST` request to the `/trigger` endpoint and contains four parts:

* The `condition` defines what type of event is to be watched for and what the specific parameters of that event should be, expressed using Elasticsearch DSL query syntax against the parameters in the event type. 
* The `job` defines what action is to be taken.
*The `title` is a memorable string for describing what the trigger is meant to do.
* The `enabled` field determines if the trigger should be listening for events in order to send Alerts.

For example:

[source,json]
----
{
    "title": "High Severity",
    "enabled": true,
    "eventTypeId": "98fc25e8-bd97-4444-a972-c06aa0f0edf1",
    "condition": {
        "query": {
            "query": {
                "bool": {
                    "must": [
                        { "match": {"severity": 5} },
                        { "match": {"code": "PHONE"} }
                    ]
                }
            }
        }
    },
    "job": {
        "jobType": {
            "type": "execute-service",
            "data": {
                "serviceId": "a2898bcb-2646-4ffd-9da7-2308cb7e77d7",
                "dataInputs": {
                    "test": {
                        "content": "{ \"log\": \"Received code $code with severity $severity\" }",
                        "type": "body",
                        "mimeType": "application/json"
                    }
                },
                "dataOutput": [ {
                    "mimeType":"image/tiff",
                    "type":"raster"
                } ]
            }
        }
    }
}
----

For details on the meanings of each field, please consult the Swagger reference page. For details on constructing valid Elasticsearch DSL queries, see the <<Elasticsearch Query Syntax>> section.

In the following example, the job will be executed only when our "test" event occurs with the `severity` equal to `5` and the `code` equal to `"PHONE"`.

It is important to note that the `job` field uses substitution by replacing all instances of `$field`, where `field` is the name of a JSON field in the event type `mapping` (and thus subsequently is in the event's `data` field) with the `field` in the event that sets off the trigger. This substitution occurs in all of the fields in `job`, so it is important to be conscious of this.

This script will create a generic Trigger for the event type associated with that `eventTypeId`:

link:scripts/7-trigger.sh[7-trigger.sh]
[source,bash]
----
include::scripts/7-trigger.sh[tags=public]
----

TO execute, pass the script an event type id,

    $ ./7-trigger.sh {{eventTypeId}}



## The Event

The user may create an event of that event type to indicate some interesting condition has occurred. The event object is sent as a `POST` request to the `/event` endpoint and contains the `eventTypeId` of the event type, and the parameters of the event. For example, a request may look like:

[source,json]
----
{
    "eventTypeId": "98fc25e8-bd97-4444-a972-c06aa0f0edf1",
    "data": {
        "filename": "dataset-c",
        "severity": 5,
        "code": "PHONE"
    }
}
----


### Scheduled Events

An evente can specify a `cronSchedule` field, which alters the mechanics of the event triggering process. The `cronSchedule` field specifies a schedule at which to repeat the specified event. This schedule is created as a Unix `cron(1)` expression. Users who are unfamiliar with cron expressions should check the man pages for cron, either via `man cron`, `man crontab`, or by searching online for cron related resources. 

Note:: For information on `cron(1)`, see http://www.cronmaker.com/[cronmaker.com] and http://crontab.guru/[crontab.guru]. The cron specification being used in our implementation is spelled out in https://github.com/robfig/cron/blob/master/doc.go, which differs slightly from traditional `cron(1)` syntax: the first asterisk is the *seconds* field. This means:

* `"cronSchedule": "* * * * * *"` - send the event every second;
* `"cronSchedule": "30 * * * * *"` - send the event every minute at the 30 second mark;
* `"cronSchedule": "* 30 * * * *"` - send the event every hour at the 30 minute mark, etc.

The 6 stars in the cronSchedule stand for:

*seconds | minutes | hours | day of month | month | day of week*

In some cron implementations, the rightmost asterisks can be omitted from the notation; this is not the case with the particular flavor of cron we are using.

Cron schedules can be spelled out using shorthand notation:

.Shorthands
|===
| Entry | Description | Equivalent To

| `@yearly` (or `@annually`)
| Run once a year, midnight, Jan. 1st
| `0 0 0 1 1 *`

| `@monthly`
| Run once a month, midnight, first of month
| `0 0 0 1 * *`

| `@weekly`
| Run once a week, midnight on Sunday
| `0 0 0 * * 0`

| `@daily` (or `@midnight`)
| Run once a day, midnight
| `0 0 0 * * *`

| `@hourly`
| Run once an hour, beginning of hour
| `0 0 * * * *`
|===

A cron schedule can be specified using the `@every duration` notation, where duration is replaced by a Go-parsable https://golang.org/pkg/time/#Duration[time.Duration]. Examples include:

* `"cronSchedule": "@every 1h30m10s"` - send event every 1 hour, 30 minutes, 10 seconds
* `"cronSchedule": "@every 30s"` - send event every 30 seconds
* `"cronSchedule": "@every 5m"` - send event every 5 minutes

It is crucial to understand that an *event that is sent with a cron schedule is not `POST`ed into the system in the same way that a typical event is. Rather, it sets up a recurring event that will be sent according to the schedule specified. If you require both an event to be sent now as well as on a particular schedule, it is wise to send both a non-repeating event and a repeating event.

In order to stop repeating events, `DELETE` the initial repeating event by its event id.

    DELETE /event/{{eventId}}

The following script will `POST` an event with a given event type id:

link:scripts/7-event.sh[7-event.sh]
[source,bash]
----
include::scripts/7-event.sh[tags=public]
----

Execute the script as:

    $ ./7-event.sh {{eventTypeId}}


## The Alert

Whenever the condition of a trigger is met, the system will create an alert object. The user can `GET` a list of alerts from the `/alert` endpoint. The alert object contains the ids of the triggert that was hit and the evente which caused it. It also contains a generated `alertId`. For example:

[source,json]
----
{
    "statusCode": 200,
    "type": "alert-list",
    "data": [
    {
        "alertId": "58d1ad21-75d0-4ee4-8429-c687b9249cc5",
        "triggerId": "170619d6-8f4e-4dc4-bcb6-8b0862e0138f",
        "eventId": "baa98fc7-f282-4caf-b35d-c2050eca010c",
        "jobId": "ab62ae7e-432b-4b61-a831-4a80b6ce836e",
        "createdBy": "",
        "createdOn": "2016-07-18T13:41:28.571761514Z"
    }
    ],
    "pagination": {
        "count": 1,
        "page": 0,
        "perPage": 10,
        "sortBy": "alertId",
        "order": "asc"
    }
}
----

The following script gets the list of alerts currently in the Piazza system:

link:scripts/7-get-alerts.sh[7-get-alerts.sh]
[source,bash]
----
include::scripts/7-get-alerts.sh[tags=public]
----

The query parameter `?triggerId=id` is provided on the endpoint to allow the list to be filtered to only alerts set off by a specified trigger.

To execute:

    $ ./7-get-alerts.sh TRIGGER_ID


## Workflow API Documentation

See http://pz-swagger.geointservices.io/#/Workflow
