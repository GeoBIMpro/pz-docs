# Search

*TODO: how do filtered GETs do string matching: all fields, exact, and/or*

Piazza supports searching across the metadata extracted from all loaded data. The search API
returns the resource ids of any matching items. (Adding data to the search index is an internal
Piazza function and so does not have an API.)

Two kinds of searching are supported. First, when doing a GET on the `/data` endpoint, you can
specify keywords to be matched: the list normally returned by `GET` is filtered to contain just
those resources that match the keywords. This is called a _filtered GET_.  Second, we have an
actual _query_: you can provide an Elasticsearch JSON object to the `/data/query` endpoint. Piazza
uses Elasticsearch DSL directly so as to avoid inventing yet another query syntax system.

## Setup

To demonstrate, we will first load three files into Piazza and set the metadata fields with some
interesting strings. (We will use the same source GeoTIFF, since we only care about the metadata.)
And to do that, we will write a script that loads the file with a given name and description and
returns the corresponding data resource id:

[source,sh]
.link:scripts/5-load-file.sh[5-load-file.sh]
----
include::scripts/5-load-file.sh[tags=public]
----

And then we will call that file loader three times, and the output should be three ids:

[source,sh]
.link:scripts/5-load-files.sh[5-load-files.sh]
----
include::scripts/5-load-files.sh[tags=public]
----

## Filtered GET Example

Now that we have the files loaded, we will perform a filtered GET. This script takes two arguments:
a search term and a data resource id. If that id does appear in the list of resources returned by
the GET, the script will pass.

[source,sh]
.link:scripts/5-filtered-get.sh[5-filtered-get.sh]
----
include::scripts/5-filtered-get.sh[tags=public]
----

## Query Example

*TODO*

### The Query Syntax

*TODO*

The Elasticsearch DSL can get very complicated. For more details, visit
link:https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html[Elasticsearch
Query DSL]. As an aid, here are some sample queries:

[source,json]
.name is "kitten"
----
{
    "foo": "bar",
    "boo": true
}
----

[source,json]
----
{
    "query": {
        "bool": {
            "must": [
            { "match": { "title":   "Search"        }},
            { "match": { "content": "Elasticsearch" }}
            ],
            "filter": [
            { "term":  { "status": "published" }},
            { "range": { "publish_date": { "gte": "2015-01-01" }}}
            ]
        }
    }
}
----
