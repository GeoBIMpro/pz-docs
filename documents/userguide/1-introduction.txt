# Introduction

Welcome to the Piazza User Guide. It contains descriptions of Piazza's main features and many pieces of example code showing how to use those features. This document is aimed at developers looking to build services and applications that use Piazza. (In contrast, the link:../devguide/index.html[Developers Guide] is aimed at developers wishing to work on the Piazza codebase itself.)

## Piazza In Brief

Piazza is a set of open source, cloud-based services aimed at helping users (developers) build GEOINT applications and services. These services are exposed via REST endpoints, providing developers with the ability to:

Load data into the system:: Given a reference to an external data source, Piazza can extract metadata and other information about that data and record it locally under a unique ID. Piazza now "knows" about that data. These data sources can be files, such as a GeoTIFF in an S3 bucket, or features, such as from a Shapefile or PostGIS database. (Note that while Piazza typically needs to read the data source's contents, it does not need to store a copy of it locally.)

Access data from the system:: Having loaded data into the system, Piazza can create access points such as OGC endpoints or download links. Users can access the data by passing requests to Piazza, using the data resource's ID.

Search data within the system:: Piazza stores the metadata about the data sources, allowing users to submit queries and receive in return a list of data resources matching the criteria.

Execute external services:: Users will wish to execute external web services, such as querying a gazetteer for a given location or extracting vector features from an image. Services can be registered by providing REST endpoints, descriptions, and parameter lists, and then Piazza can execute these services on the user's behalf. The services can reference data loaded into Piazza (using the data resource ID) or externally via URL.

Detect events and trigger actions:: Piazza allows users to define "types" of events, such as the loading of a new file within a certain bounding box or the successful completion of an external service; the events can be generated from within the system or sent to the system from the outside. Users can then define actions to be taken when certain event conditions are met, thus allowing Piazza to be responsible for executing simple "workflows" of activities.

Piazza is not unique in its ability to offer these services. Developers could for example, use a message queuing system to implement their own eventing and triggering system, or could stand up their own WPS server for invoking external services. It is our position, however, that in many cases developers shouldn't have to. For many common needs, Piazza can provide a simple alternative.


## A User's View of Piazza

From the outside, Piazza is web service that exposes several REST endpoints for performing operations like loading data or invoking a user service. This web service is called the Gateway, and it is the only service most users will need to know about.

Following the REST model, the Gateway supports the usual HTTP verbs (`POST`, `GET`, `DELETE`, etc.) and models objects within the system as _resources_ with unique ids (GUIDs). For example, to load a file into Piazza, one might `POST` to `/data` a JSON object which describes an image in an S3 bucket. If the operation is successful, an id such as `b72b270a-168f-466a-a7eb-952a3da7fc8b` will be returned. The user can then issue a `GET` request to `/data/b72b270a-168f-466a-a7eb-952a3da7fcb8` and get back a JSON object containing information about that data resource. These operations are described in detail in the next section.

Requests sent to Piazza can be either _short_ or _long_. Short requests, like most `GET` and `DELETE` operations return their results immediately. Long operations, however, like a `POST` to load a file, return a _jobId_. Piazza executes a long operation as a _job_. Using the jobId, a client can query for the status of the job and, when it has completed, the result of the job.

Internal to Piazza, and hidden from users, are a set of web services that implement and support the operations that the Gateway provides. These services include operations like storing metadata, serving up feature data via WFS, and tracking the status of executions of user services. Also hidden behind the Gateway are a number of "infrastructure" components like Elasticsearch, GeoServer, PostGIS, and Kafka. Information about Piazza's internals can be found in the Piazza Developers Guide.

## An Example Application

Let's consider an example of an application that might use Piazza: shoreline extraction. Detailed, current information about shoreline locations -- expressed as vector (linear) features -- is an important resource for everything from monitoring coastal erosion to planning amphibious assaults.

Imagine that you have been asked to build an application that runs 24/7 to continually update a database of shoreline vectors. You have been given access to a repository of global satellite imagery, and this repository is continually being updated with new data. You have also been given three different algorithms that compute shoreline vectors from such imagery; none of the three works perfectly, and some are better than others for detecting certain types of shoreline, e.g estuaries. Because none of them work all the time, the algorithms return a "confidence" metric for each computed shoreline vector; if the confidence is "low", the imagery and the candidate vector must be reviewed manually.

Your application will need to perform the following operations:

. The image repository must be monitored for a new image to appear.
. When a new image is available, its metadata must be extracted, such as its spatial bounding box, estimated cloud cover percentage, etc.
. Using that metadata, the image's usability must be determined, based on whether the image contains any coastal regions (using the bounding box) and if the image's quality (using the cloud cover) is high enough.
. If the new imagery is usable, it must be sent to each of the shoreline extraction algorithms.
. As each algorithm completes, its returned vectors must be either sent to a user for manual inspection (if confidence is low) or inserted into the shoreline database (if confidence is high).

Piazza can be used to help implement all of these operations.

. A script must be written to monitor the imagery repository for new data; when new data appears, it must be loaded into Piazza.footnote:[Future Piazza feature: direct support for monitoring (and loading) various types of data sources automatically]
. When loaded into Piazza, the image's metadata is extracted and stored within Piazza.
. Using Piazza's workflow (eventing) service, a "rule" can be constructed: when _a new image is loaded and its bounding box intersects this polygon and its cloud cover is below a threshold_, then _invoke each of the algorithms (in parallel) using the loaded image's resource id as the input_.
. Again using the workflow service:
.. When _all three algorithms have completed and if the confidence is low_, then _issue a manual-check-needed alert, whose payload consists of the data resource id, the candidate vector, and the confidence value_.
.. When _each of the algorithms completes and if the confidence is high_, then _perform a database insert_.
. Within some UI application, poll Piazza for manual-check-needed alerts: when found, present the data to the user for evaluation.

A variation of this example exercise is provided in the Piazza distribution.footnote:[TODO]
