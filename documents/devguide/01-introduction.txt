# Introduction
The Piazza API is a series of REST endpoints that allow Non Person Entities (NPEs) to access tools and interact with all of Piazza’s core functionality.   All NPE requests come into Piazza through an entry-point called the Gateway. The Gateway is an abstract layer to Piazza which hides the core services so NPEs can communicate with Piazza using a single service endpoint.  This architecture approach allows for changes within Piazza to happen without affecting the NPEs. 

Piazza leverages a number of backing services to enable the rapid development of enterprise GIS solutions.  The figure below shows a high level overview of the interactions between Piazza and these backing services.  

All Piazza requests are authenticated with an API Key associated with each request's basic authentication headers. This API Key is generated and held by Piazza's Identity and Access Management (IDAM) component.

image::images/pz-hla-diagram.jpg[title="Piazza High Level Architecture Diagram"]

Developers have access to Piazza’s API documentation (Swagger) and User’s Guide (Docs) to learn how to use Piazza’s REST API to implement GEOINT solutions to support the mission.   To review these items refer to the References section for details.

To verify and administer Piazza’s capability, Piazza’s Swiss Army Knife (SAK) web application provides Piazza administrators with dashboard view into the Piazza system.  Using this dashboard, administrators can verify the operational capabilities of various Piazza microservices. 

Piazza leverages MongoDB for system support, Elasticsearch for searching/indexing support and Crunchy PostgreSQL/PostGIS for processing support of geospatial data.  For activities that are time intensive and to support internal microservice communication, Piazza uses Apache Kafka for asynchronous messaging support.  To provide access to enterprise storage, Piazza leverages Amazon’s Simple Storage Service (S3) for loading/accessing data processing results and geospatial data.   NPEs can also access geospatial data by using OGC standard APIs (Boundless GeoServer).

The core functionality of Piazza is split up into several internal components that are shown in the below diagram. The purpose of this section is to provide an overview of these core components, and how interactions between these components are defined.

Piazza consists of a set of stateless microservices where core capabilities are broken up into small independent deployable services.  Stateless microservices treat each request as an independent transaction and do not rely on previous data or “state” from previous requests.  The Gateway takes the incoming Piazza requests and routes them to the appropriate services. Figure 2 shows an overview of Piazza’s microservices and how they interact with each other.  

Communication between these microservices is done using two mechanisms.  The primary mechanism is using HTTPS where microservices communicate directly by initiating requests and receiving responses.   The second mechanism is using asynchronous notifications where communication is initiated when specific conditions are met.  The second mechanism leverages Apache Kafka message bus and Elasticsearch Triggers to provide for asynchronous notifications.

image::images/pz-hla-diagram-detailed.jpg[title="Piazza Detailed Architecture Diagram"]

Using Piazza, NPEs can  perform actions such as the loading and retrieval data, the registration and execution user services, and registration of workflow events or triggers. The requests and responses from the Gateway are defined via JSON. The Gateway acts as an external broker, or proxy, to the internal components of the Piazza application. The Gateway will receive user requests, and then route that request or command to the appropriate internal Piazza component. 

This provides Piazza with a convenient single point-of-access that allows for authentication and authorization and detailed logging of all incoming requests. By design, the internal Piazza components are masked to external users, and are not able to be accessed directly.

While the communication with Gateway primarily is performed through HTTP requests via RESTful interfaces; there is also a tool provided by Piazza called the Piazza Swiss Army Knife (SAK). SAK is a web application that administrative users can log into to execute certain requests through the Gateway, and more importantly, track logging and other reporting information about the internal details of Piazza. This tool is intended for administrative users only; those who needs direct access to Piazza outside of just the user API.

Communication between the Gateway and the internal core components is done one of two ways. First, for most synchronous calls (such as data retrieval of querying), the internal Piazza components will define REST endpoints that Gateway will proxy user requests to; Gateway will then await responses from this request and proxy along the response back to the user. In this scenario, the Gateway is functionally just a simple proxy that provides functionality for internal Piazza components. Second, for requests that are asynchronous by nature (such as executing a long-running service, or loading a very large dataset) the Gateway will then produce messages to a Kafka broker. Internal Piazza components that are delegated to handle these messages will have Kafka consumers defined to subscribe to these messages, and upon receiving an appropriate message, will begin work on handling that request. The Gateway will return a handle to this long-running process that the user can then use to retrieve the status, and subsequent results, of that process. The Job Manager component is what handles the tracking of these long-running processes.

The Ingest component is the internal component that handles the loading of spatial data. This component  is capable of referencing data held in external locations, such as another accessible S3 file store; or loading data specified by the user to be stored directly within Piazza. The Ingest component receives Kafka messages from the Gateway, with the information as to the file to be stored. The Loader then inspects the data to validate and populate metadata fields (such as Area of Interest) and then stores this metadata within the Piazza MongoDB instance. The Access component is what handles the accessing of this data - either by requesting metadata, requesting file downloads, or requesting GeoServer deployments of data. When requesting GeoServer deployments of loaded data into Piazza, the Access component will transfer the appropriate files over to the GeoServer data directory, and then create a deployment lease that provides a guarantee for a certain length of time that the data will be available on the Piazza GeoServer instance.

The Service Controller is what handles the registration and execution of user services. Piazza Service Controller acts as a broker to external services that allows users (developers) to host their own algorithmic or spatial services directly from within Piazza. Other external users can then run these algorithms with their own data. In this way, Piazza acts as a federated search for algorithms, geocoding, or other various microservices (spatial or not) to run within a common environment. Using the Piazza Workflow component, users can create workflows that will allow them to chain events together (such as listening for when new data is loaded into Piazza) in order to create complex, automated workflows. This satisfies one of the primary goals of Piazza: Allowing users across the GEOINT Services platform to share their data and algorithms amongst the community.

Piazza uses a variety of data stores in order to manage its persistence. This is done through Cloud Foundry services for MongoDB, Elasticsearch, PostGIS, and S3. MongoDB is used for general JSON storage, since the payloads of all Gateway REST API Requests are JSON-based, this makes MongoDB a prime candidate for storing this type of data. Elasticsearch is used to perform complex searches on the JSON-based metadata that Piazza indexes to allow for users to find the exact data and services that they are looking for. PostGIS is used when users request for vector data to be stored directly in Piazza; PostGIS is also used when hosting these vector datasets in a GeoServer instance. S3 is used for large file persistence, such as GeoTIFFs.

// vim: set syntax=asciidoc wrap:
