# Introduction

The core functionality of Piazza is split up into several internal components that are shown in the below diagram. The purpose of this section is to provide an overview of these core components, and how interactions between these components are defined.

image::images/overview.jpg[title="Piazza Component Overview"]

For users, the primary interface of Piazza is through the Gateway. The Gateway defines a REST API that contains endpoints used to interact with internal Piazza components in order to perform actions such as load and retrieval data, registration and execution services, and registration of workflow events or triggers. The requests and responses from the Gateway are defined via JSON. The Gateway acts as an external broker, or proxy, to the internal components of the Piazza application. The Gateway will receive user requests, and then route that request or command to the appropriate internal Piazza component. In this way, the user deals with only a single Piazza component - the Gateway - in order to achieve all of their functionality. This provides Piazza with a convenient single point-of-access that allows for authentication and authorization and detailed logging of all incoming requests. By design, the internal Piazza components are masked to external users, and are not able to be accessed directly.

While the communication with Gateway primarily is performed through HTTP requests via RESTful interfaces; there is also a tool provided by Piazza called the Piazza Swiss Army Knife (SAK). SAK is a web application that administrative users can log into to execute certain requests through the Gateway, and more importantly, track logging and other reporting information about the internal details of Piazza. This tool is intended for administrative users only; those who needs direct access to Piazza outside of just the user API.

Communication between the Gateway and the internal core components is done one of two ways. First, for most synchronous calls (such as data retrieval of querying), the internal Piazza components will define REST endpoints that Gateway will proxy user requests to; Gateway will then await responses from this request and proxy along the response back to the user. In this scenario, the Gateway is functionally just a simple proxy that provides functionality for internal Piazza components. Second, for requests that are asynchronous by nature (such as executing a long-running service, or loading a very large dataset) the Gateway will then produce messages to a Kafka broker. Internal Piazza components that are delegated to handle these messages will have Kafka consumers defined to subscribe to these messages, and upon receiving an appropriate message, will begin work on handling that request. The Gateway will return a handle to this long-running process that the user can then use to retrieve the status, and subsequent results, of that process. The Job Manager component is what handles the tracking of these long-running processes.

The Piazza Loader component is the internal component that handles the loading of spatial data. The Loader is capable of referencing data held in external locations, such as another accessible S3 file store; or loading data specified by the user to be stored directly within Piazza. The Loader receives Kafka messages from the Gateway, with the information as to the file to be stored. The Loader then inspects the data to validate and populate metadata fields (such as Area of Interest) and then stores this metadata within the Piazza MongoDB instance. The Piazza Access component is what handles the accessing of this data - either by requesting metadata, requesting file downloads, or requesting GeoServer deployments of data. When requesting GeoServer deployments of loaded data into Piazza, the Access component will transfer the appropriate files over to the GeoServer data directory, and then create a deployment lease that provides a guarantee for a certain length of time that the data will be available on the Piazza GeoServer instance.

The Piazza Service Controller is what handles the registration and execution of user services. Piazza Service Controller acts as a broker to external services that allows users (developers) to host their own algorithmic or spatial services directly from within Piazza. Other external users can then run these algorithms with their own data. In this way, Piazza acts as a federated search for algorithms, geocoding, or other various microservices (spatial or not) to run within a common environment. Using the Piazza Workflow component, users can create Workflows that will allow them to chain events together (such as listening for when new data is loaded into Piazza) in order to create complex, automated workflows. This satisfies one of the primary goals of Piazza: Allowing users across the GEOINT Services platform to share their data and algorithms amongst the community.

Piazza uses a variety of data stores in order to manage its persistence. This is done through Cloud Foundry services for MongoDB, Elasticsearch, PostGIS, and S3. MongoDB is used for general JSON storage, since the payloads of all Gateway REST API Requests are JSON-based, this makes MongoDB a prime candidate for storing this type of data. Elasticsearch is used to perform complex searches on the JSON-based metadata that Piazza indexes to allow for users to find the exact data and services that they are looking for. PostGIS is used when users request for vector data to be stored directly in Piazza; PostGIS is also used when hosting these vector datasets in a GeoServer instance. S3 is used for large file persistence, such as GeoTIFFs.

// vim: set syntax=asciidoc wrap:
