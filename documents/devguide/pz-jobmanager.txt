# pz-jobmanager

Internal component that provides persistence for Jobs as they pass throughout the application. This contains a [MongoDB](https://www.mongodb.org/) instance that stores all Jobs.

## Vagrant

*Note*: Vagrant setup will fail because the Nexus credentials are not injected. If you want Vagrant to work, you will have to update the Maven settings on the Vagrant box to include the Nexus repository with your credentials. In the mean time, please run this component locally. 

Run ``vagrant up`` to start the Job Manager service and Database Instance. The Job Manager service and the Database are **not** intended to be accessed directly, and thus provide no convenient interface for access. Instead, internal Piazza components should communicate with the [Dispatcher](https://github.com/venicegeo/pz-dispatcher) component. The Dispatcher provides a REST Interface for synchronously querying Job Status, and consumes a series of Kafka topics that can be produced in order to modify the Job collections contained in the database. As a result, the [Dispatcher](https://github.com/venicegeo/pz-dispatcher) Vagrant machine should also be running in order to interact with the Job Manager's Vagrant machines. For Kafka messaging, the [Kafka Devbox](https://github.com/venicegeo/kafka-devbox) is also required to be running. 

## Running Locally

To run the Job Manager service locally (without Vagrant), perhaps through Eclipse or through CLI, navigate to the project directory and run ``mvn clean install -U spring-boot:run``. This will run a Tomcat server locally with the Gateway service running on port 8083. Even if running the Job Manager locally, you should still run the MongoDB instance inside of Vagrant by running ``vagrant up jobdb`` from the /config directory.

## Interface

The Dispatcher component interacts directly with the Job Manager. For updates, this is done through Kafka Messages such as ``Create-Job``. For querying the status of Jobs, this is done synchronously through a REST Endpoint exposed by the Job Manager and available at http://jobmanager.dev:8083/job/JOB_ID. *(Since this endpoint is not intended to be accessed directly, it will likely be eventually locked down so that only the Dispatcher is allowed access to it. However, for testing, it will remain open.)*

## Piazza Database & Jobs Collection

The MongoDB instance uses a database titled ``Piazza`` with a single ``Jobs`` collection. The interfaces exposed through the Dispatcher messaging will be simple CRUD-style functionality. The JSON stored in the Jobs collection will be stored using the [Common Job](https://github.com/venicegeo/pz-jobcommon)

....
{
	"type": "job"
	"jobId": "a10a04af-5e7e-4aea-b7de-f3dbc12e4279"
	"ready": false
	"status": "Submitted",
	"result": {},
	"progress": {
		"percentComplete": null
		"timeRemaining": null
		"timeSpent": null
	}
}
....

## Repeating Jobs

The Job Manager, for the most part, acts like a metadata store that simply marks the statuses of Jobs in the Mongo database. However, the Job Manager does handle one specific Job type: Repeating Jobs. Jobs that have been previously processed into the Piazza system (including Jobs that have previously failed) can be re-run using the `repeat` Job Type. 

....
{
	"userName": "my-api-key-38n987",
	"jobType": {
		"type": "repeat",
		"jobId": "d42bfc70-0194-47bb-bb70-a16346eff42b"
	}
}
....

The Repeat job takes in a single parameter `jobId` which is used to find the Job to repeat. The Job will then be repeated based on the initial request parameters of that Job (all stored in the Job Table). The Job will be re-run with identical parameters to its initial request, except for one difference: the API Key of the user who requested the Repeat Job will be attached to the new Job being repeated. This ensures that users who do not have permissions to create the initial Job, also do not have permissions to Repeat someone else's Job.

The response for a Repeat Job is simply the ID of the new Job that has been created for the Repeating Job.

....
{
  "type": "job",
  "jobId": "6077d80e-6d81-4cc4-8b11-672493e161b8",
  "result": {
    "type": "job",
    "jobId": "ac873b2e-4503-4a92-bed5-9c0d9f412a41"
  },
  "status": "Success"
}
....

The Job ID can be extracted from the Result and can then be queried for Status as usual. 

## Administrative API

The Job Manager provides a series of REST Endpoints that can be used to query the Job Manager for certain information useful to utilities like the Swiss-Army-Knife (SAK). The requests are as follows.

### Job Model

Jobs returned through REST Endpoints will follow the JSON Model defined in the [model.job.Job](https://github.com/venicegeo/pz-jobcommon/blob/master/src/main/java/model/job/Job.java) class. 

### REST Endpoints

* Getting Job Count -- `/job/count`
** Gets a count of the Jobs in the Piazza system. 

* Getting Jobs -- `/job`
** Gets all of the Jobs in the Piazza system. 
*** *page* : The start page for the query. Optional, default 0.
*** *pageSize* : The number of results per page. Optional, default 10. 

* Get Specific Job - `/job/{jobId}`
** Gets a specific Job.
*** *jobId* : The ID of the Job to retrieve.

* Get Job Statuses -- `/job/status`
** Gets a list of all possible Statuses to query.

* Get Jobs Status Counts -- `/job/status/{status}/count`
** *status* : The Status to get the count for.

* Get Job by Status -- `/job/status/{status}`
** *status* : The Status to get the Jobs for.
*** *page* : The start page for the query. Optional, default 0.
*** *pageSize* : The number of results per page. Optional, default 10. 

* Get Jobs by User ID -- `/job/userName/{userName}`
** *userName* : The API Key of the user to query for Jobs submitted by.
** *page* : The start page for the query. Optional, default 0.
** *pageSize* : The number of results per page. Optional, default 10. 

* Administrative Statistics -- `/admin/stats`
** Return object containing information regarding the running instance of this component. Currently returns the number of Jobs held in the Job Table, listed by status.

....
{
  "running": 2,
  "fail": 0,
  "total": 19,
  "submitted": 0,
  "success": 16,
  "pending": 0,
  "cancelled": 0,
  "error": 1
}
....
