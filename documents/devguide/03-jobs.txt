## Gateway API

The Gateway API is the single point-of-contact for external users to interact with Piazza Core components. This API provides functionality for loading and accessing data, registering and executing services, and registering events and triggers. The entirety of Piazza functionality is accessed through these Gateway API calls.

See the Swagger documentation for a full explanation of all of these endpoints.

### Authentication

Authentication with the Gateway is done using basic authentication. This means setting the authentication header in your request to basic authentication, which takes in the username and password and base64 encodes it into a string, which is passed along to the gateway and decoded. These credentials are then passed on to `pz-security` security component which handles authentication and authorization.

### Jobs

For most requests handled through the Piazza Gateway, the response will contain the expected information for said request (for example - querying data will return a list of data results, etc.), however: when executing a request within Piazza that could take a long amount of time (such as ingesting data, or executing an external service) Piazza will return a Job ID which can be used to track the status and progress of that request. The motivation for providing a Job ID is to allow the Gateway to return a response immediately, which will not block the user. It will also allow the user to track the progress of a long-running job as it is handled by internal Piazza components.

Endpoints that return a Job ID are documented and outlined in the Swagger documentation.

....
{
	"jobId": "my-job-id"
}
....

The response may look something like the above. In this case, the requesting user can then take the Job ID and re-query the Gateway with the Job ID in order to get the latest status and progress of that Job.

When the Job has been completed, the result of the associated Job (being a data ID, or service, or whatever the end result of the Job was) will be contained in the status of that Job, including the time it was completed and how long it took.

## Endpoints

### Job Management

Endpoints related to managing long-running jobs processed by Piazza.

* Get Job Status _GET_ `/job/{jobId}`
* Abort _DELETE_ `/job/{jobId}`
* Repeat _PUT_ `/job/{jobId}`

### Data Management Jobs

Endpoints related to managing geospatial data within Piazza.

* Access Data _GET_ `/data`
* Ingest _POST_ `/data`
* Ingest with File _POST_ `/data/file`
* Get Resource _GET_ `/data/{dataId}`
* Search Query _GET_ | _POST_ `/data/query`
* Search Metadata Ingest _POST_ `/data/metadata` *Where is the use case?*
* Access Request _POST_ `/deployment`
* Access Fetch _GET_ `/deployment/{deploymentId}`
* Access File _GET_ `/file/{dataId}`
* Search Metadata Ingest _POST_ `/data/metadata` *Where is the use case? TBD*

### Service Controller Jobs

Endpoints related to external service registrations and executions.

* Register Service _POST_ `/service`
* Describe Service _GET_ `/service/{serviceId}`
* List Services _GET_ `/service`
* Search Service _GET_ `/service?keywords=beachfront` _with query string_
* Delete Service _DELETE_ `/service/{serviceId}`
* Update Service _PUT_ `/service/{serviceId}`
* Execute Service _POST_ `/job`

### Workflow

Endpoints related to setting up events and event types, and defining triggers for when certain events occur.

* Get all events: `GET /event`
* Add an event: `POST /event/{eventType}`
* Get all events of a specific type: `GET /event/{eventType}`
* Get a specific event: `GET /event/{eventTypeId}/{eventId}`
* Delete a specific event: `DELETE /event/{eventTypeId}/{eventId}`
* Add an event type: `POST /eventType`
* Get all event types: `GET /eventType`
* Get a specific event type: `GET /eventType/{eventTypeId}`
* Delete a specific event type: `DELETE /eventType/{eventTypeId}`
* Add a trigger: `POST /trigger`
* Get all triggers: `GET /trigger`
* Get a specific trigger: `GET /trigger/{triggerId}`
* Delete a specific trigger: `DELETE /trigger/{triggerId}`
* Get all alerts: `GET /alert`
* Get a specific alert: `GET /alert/{alertId}`
* Delete a specific alert: `DELETE /alert/{alertId}`
