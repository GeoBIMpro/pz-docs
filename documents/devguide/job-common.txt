# Pz-JobCommon

The Job Common (or Java Common) project is a Java library that contains various useful utility classes and serializable models that are used commonly throughout the Java applications in the Piazza Core.

## Maven Artifact

For instructions on how to include this library in your Java project, through Maven, please see the [Repo Documentation](https://github.com/venicegeo/pz-jobcommon/). This contains all information needed to connect to the Piazza S3 Maven repository and include the Common library as a dependency in your `pom.xml` file.

## Spring Beans

The `pz-jobcommon` project contains a variety of Spring Beans that are used to wrap core Piazza services, such as the Logger or UUIDGen, in order to provide a handy Java API for interactions that conform to Spring standards.

*IMPORTANT*: `PiazzaLogger` and `UUIDFactory` are created with `@Component` annotations, and can thus be `@Autowired` into your classes as normal. However, since these Beans are defined in an external project (`pz-jobcommon`) then one slight change to your project annotation must be made to your Application file:

....
@SpringBootApplication
@ComponentScan({ "MY_NAMESPACE, util" })
public class Application extends SpringBootServletInitializer {
....

In the above syntax, the `@ComponentScan()` annotation was added. This is required in order to tell Spring to search for `@Components` in additional namespaces to your own. In this case, we are telling Spring to look in the `MY_NAMESPACE` package, which is a placeholder for your projects own namespace (such as `gateway` or `jobmanager`) -- this will ensure your own project Components get picked up. Additionally, we tell Spring to look for Components in the `util` namespace which is defined in the `pz-jobcommon` project and contains the `PiazzaLogger` and `UUIDFactory` classes. 

The above lines are required because, if not specified, Spring would only look for Components in the default project namespaces (represented by the placeholder `MY_NAMESPACE`) and would not find the components located in the `util` package, and thus you would receive errors when attempting to Autowire something like the `PiazzaLogger`.

If you do not wish to use the `PiazzaLogger` or `UUIDFactory` classes as Autowired Components in your application (which is highly recommended!) then you are free to instantiate them as normal using the provided constructors. However, this is discouraged because you will have to inject the `url` values for each component directly from the constructor in order for these classes to function. It is much preferred to Autowire these components with appropriate `url` values (described in the below sections for each component) and letting Spring instantiate this for you. 

### PiazzaLogger

Provides a Java API to the [pz-logger](https://github.com/venicegeo/venice/wiki/Pz-Logger) component.

The PiazzaLogger Bean has two required property values. These must be placed in your `application.properties` or `application-cloud.properties` file in order for these components to work when Autowired.

....
pz.logger.url=pz-logger.cf.piazzageo.io/v1/messages
pz.logger.name=COMPONENT_NAME
pz.logger.console=false
....

The `pz.logger.url` represents the Pz-Logger endpoint that will receive Log messages. The `pz.logger.name` component will correspond to the name of your individual component (such as `Gateway`) and will be associated with each Log message.

*IMPORTANT!* Your local, debug instances of your components probably don't need to log to `pz-logger`. Why bother cluttering up the live version of the pz-logger component with your debug code? In this case, just leave the `pz.logger.url` blank, or give it a junk value. The `PiazzaLogger` component will fail gracefully and no junk messages will ever get published to the real `Pz-Logger`. The recommended approach is to leave this value outside your `application.properties` file, and instead place it only in your `application-cloud.properties` file.

If you want the `PiazzaLogger` class to also write to your local console (useful for debugging!) then you can specify the `pz.logger.console` configuration value to `true`. All statements will then also be directed out to your local console.

Incorporating the `PiazzaLogger` class as a Component is simple.

....
	@Autowired
	private PiazzaLogger logger;
....

Logs can then be sent using the `.log(message, severity)` method. The `message` is simply the message you wish to Log. The `severity` is a list of acceptable severity levels defined in the `PiazzaLogger` class. 

....
	public static final String DEBUG = "Debug";
	public static final String ERROR = "Error";
	public static final String FATAL = "Fatal";
	public static final String INFO = "Info";
	public static final String WARNING = "Warning";
....

Please reference these static variables when sending your Logs. For example:

....
	@Autowired
	private PiazzaLogger logger;

	logger.log("Something went wrong!", PiazzaLogger.ERROR);
....

### UUID Gen (UUIDFactory)

Provides a Java API to the [pz-uuidgen](https://github.com/venicegeo/venice/wiki/Pz-UuidGen) component.

The UUIDFactory Bean has one required property value. This must be placed in your `application.properties` or `application-cloud.properties` file in order for this component to work when Autowired.

....
pz.uuid.url=pz-uuidgen.cf.piazzageo.io/v1/uuids
....

This `pz.uuid.url` should point to the UUIDGen endpoint that hosts this service.

Incorporating the `UUIDFactory` class as a Component is simple.

....
	@Autowired
	private UUIDFactory uuidFactory;
....

This class supports two methods for obtaining UUIDs. One method for getting a single UUID, another for generating a list.

....
// Getting a single UUID
String uuid = uuidFactory.getUUID();
// Getting a list of 5 UUIDs
List<String> uuids = uuidFactory.getUUID(5);
....

Each of these methods throw a `RestClientException` which occurs when the REST Endpoint for the UUIDGen service is not able to be found.

*IMPORTANT*: Currently, if the `UUIDGen` REST Endpoint is not found or contains an error, a UUID will be generated locally using the `java.util.UUID` class. This is temporary behavior and should NOT be relied upon. Error messages will be logged to your console output if this happens - it is not silent.

## Other Utilities/Factories

### Kafka Producers and Consumers

### Kafka Message Creation

## Models
