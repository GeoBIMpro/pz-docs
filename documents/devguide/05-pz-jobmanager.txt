# pz-jobmanager

Internal component that provides persistence for long-running Jobs (processes) as they pass throughout the application. This contains a https://www.mongodb.org/[MongoDB] instance that stores all Jobs. Internally, this component also routes certain Kafka messages for when Jobs are requested to be created.

## Running Locally

To run the Job Manager service locally, perhaps through Eclipse or through CLI, navigate to the project directory and run ``mvn clean install -U spring-boot:run``. This will run a Tomcat server locally with the Gateway service running on port 8083. Even if running the Job Manager locally, you should still run the MongoDB instance inside of Vagrant by running ``vagrant up jobdb`` from the /config directory.

## Source Organization

The main logic of the Job Manager is split between two package. The `controller` package contains the REST controller that contains the REST endpoints for querying job status, etc. This is a simple Spring RestController that contains the endpoints defined as simple functions. The `messaging` package declares the Kafka logic, where the JobManager defines Kafka consumers to poll for incoming messages. The messages pertain to 1) Creating new Jobs and 2) Updating the status of Jobs. The Jobs are persisted in the MongoDB and interaction code to handle the MongoDB commits is located in the `database` package.

## Interface

The main communication with the Job Manager is via Kafka from messages. The Gateway sends "Request-Job" messages to the Job Manager in order to index the running of new jobs. The components that process Jobs will also send Kafka messages to the Job Manager in order to update the status of running jobs.

The Job Manager also contains a series of REST endpoints that are used for obtaining Job Status, or lists of Jobs.

## Piazza Database & Jobs Collection

The MongoDB instance uses a database titled `Piazza` with a single `Jobs` collection. The interfaces exposed through the Dispatcher messaging will be simple CRUD-style functionality. The JSON stored in the Jobs collection will be stored using the https://github.com/venicegeo/pz-jobcommon[Common Job].

[source,json]
----
{
    "type": "job"
    "jobId": "a10a04af-5e7e-4aea-b7de-f3dbc12e4279"
    "ready": false
    "status": "Submitted",
    "result": {},
    "progress": {
        "percentComplete": null
        "timeRemaining": null
        "timeSpent": null
    }
}
----

## Repeating Jobs

The Job Manager, for the most part, acts like a metadata store that simply marks the statuses of Jobs in the Mongo database. However, the Job Manager does handle one specific Job type: Repeating Jobs. Jobs that have been previously processed into the Piazza system (including Jobs that have previously failed) can be re-run..

....
PUT /job/{jobId}
....

The Repeat job endpoint takes in a single parameter `jobId` which is used to find the Job to repeat. The Job will then be repeated based on the initial request parameters of that Job (all stored in the Job Table). The Job will be re-run with identical parameters to its initial request, except for one difference: the API Key of the user who requested the Repeat Job will be attached to the new Job being repeated. This ensures that users who do not have permissions to create the initial Job, also do not have permissions to Repeat someone else's Job.

The response for a Repeat Job is simply the ID of the new Job that has been created for the Repeating Job.

[source,json]
----
{
    "status": "Success",
    "type": "job",
    "result": {
        "type": "job",
        "jobId": "ac873b2e-4503-4a92-bed5-9c0d9f412a41"
    },
    "jobId": "6077d80e-6d81-4cc4-8b11-672493e161b8"
}
----

The Job ID can be extracted from the Result and can then be queried for Status as usual.

## Administrative API

The Job Manager provides a series of REST Endpoints that can be used to query the Job Manager for certain information useful to utilities like the Swiss-Army-Knife (SAK). The requests are as follows.

### Job Model

Jobs returned through REST Endpoints will follow the JSON Model defined in the https://github.com/venicegeo/pz-jobcommon/blob/master/src/main/java/model/job/Job.java[Job Class].

### REST Endpoints

* Getting Job Count -- `/job/count`
** Gets a count of the Jobs in the Piazza system.

* Getting Jobs -- `/job`
** Gets all of the Jobs in the Piazza system.
*** *page* : The start page for the query. Optional, default 0.
*** *pageSize* : The number of results per page. Optional, default 10.

* Get Jobs Status Counts -- `/job/status/{status}/count`
** *status* : The Status to get the count for.

* Get Job by Status -- `/job/status/{status}`
** *status* : The Status to get the Jobs for.
*** *page* : The start page for the query. Optional, default 0.
*** *pageSize* : The number of results per page. Optional, default 10.

* Get Jobs by User ID -- `/job/userName/{userName}`
** *userName* : The API Key of the user to query for Jobs submitted by.
** *page* : The start page for the query. Optional, default 0.
** *pageSize* : The number of results per page. Optional, default 10.

* Administrative Statistics -- `/admin/stats`
** Return object containing information regarding the running instance of this component. Currently returns the number of Jobs held in the Job Table, listed by status.

[source,json]
----
{
    "running": 2,
    "fail": 0,
    "total": 19,
    "submitted": 0,
    "success": 16,
    "pending": 0,
    "cancelled": 0,
    "error": 1
}
----

// vim: set syntax=asciidoc wrap:
