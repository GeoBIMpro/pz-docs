# Workflow Service

The pz-workflow service enables the construction and use of "event" notifications to enable simple
"if-this-happens-then-do-that" workflows.

A user will follow these general steps:

. Register a new event type
. Register a trigger for that event type
. Send an event
. Poll for new alerts
. Go to 3.


## The EventType

The user (or some service) first defines an `EventType` which is the "schema" for the events that
the user will be generating. The `EventType` object is POSTed to `/eventType` and contains contains
a `name` (string) and a map describing the event type's parameters. It also contains a
system-generated ID. For example:

[source,json]
----
{
    "id": "17de4",
    "name": "USDataFound",  # short, id-like string
    "mapping": {
        "ItemId":   "string",   # the uuid of the bad data
        "Severity": "integer",  # level of offense, 1..5
        "Problem":  "string"   # nature of the issue, e.g. US bbox, US phone number, etc
    }
}
----

The available data types are `string`, `boolean`, `integer`, `double`, `date`, `float`, `byte`,
`short`, and `long`. (By no coincidence, these are the basic types that Elasticsearch supports.)


## The Trigger

The user then defines a `Trigger` which defines what action is to be taken when a specific event
occurs. The `Trigger` is POSTed to `/trigger` and contains two parts, the `Condition` and the
`Job`. The `Condition` defines what type of event is to be watched for and what the specific
parameters of that event should be, expressed using Elasticsearch DSL query syntax against the
parameters in the event type. The `Job` defines what action is to be taken, expressed as using
Gateway/Dispatcher-style syntax. The `Trigger` also contains a system-generated ID. For example:

[source,json]
----
{
    "id": "987d6",
    "title": "my found-a-bad-telephone-number trigger",
    "condition": {
        "eventtype_ids": ["17de4"],
        "query": {
            "query": {
                "bool": {
                    "must": [
                        {
                            "match" : {
                                "Severity" : 4
                            }
                        },
                        {
                            "match" : {
                                "Problem" : "us-bbox"
                            }
                        }
                    ]
                }
            }
        }
    },
    "job": {
        "userName": "test",
        "jobType": {
            "type": "execute-service",
            "data": {
                "serviceId": "serviceId",
                "dataInputs": {},
                "dataOutput": [ { "mimeType": "application/json", "type": "text" } ]
            }
        }
    }
}
----

In this example, the job will be executed only when our "US data found" event occurs with the
specific problem being that a US bounding box has been found with a severity of 4.

_Note: the "eventtype_ids" field of the "condition" will likely be removed in the future, as the
query DSL allows us to specify the event type directly within it; this would open up the
possibility of having a condition based on multiple events.


## The Event

The user may generate an `Event` of that `EventType` to indicate some interesting condition has
occurred. The `Event` object is POSTed to `/event` and contains the ID of the `EventType`, the date
the event occurred, and the parameters of the event. It also contains a system-generated ID. For
example:

[source,json]
----
{
    "id": "53dac"
        "eventtype_id": "17de4",
        "date": "2007-04-05T14:30:00Z",
        "data": {
            "ItemId": "eb872",   # in this case, the id of a data item loaded into Pz
                "Severity": 4,
            "Problem": "us-bbox",
            "userName": "my-api-key-38n987",
            "jobId":  "43688858-b6d4-4ef9-a98b-163e1980bba8"
        }
}
----


## The Alert

Whenever the condition of a `Trigger` is met, the system will create an `Alert` object. The user
can GET a list of alerts from `/alert`. The `Alert` object contains the ids of the `Trigger` that
was hit and the `Event` which caused it. It also contains the now ubiquitous system-generated ID,
and the id of the `Job` that was triggered by the event (note that at the current time, this is
sent as a JobRequest, which may or may not become an actual job if the request is malformed).
For example:

[source,json]
----
{
    "id": "8e6fa",
    "trigger_id": "987d6",
    "event_id": "53dac",
    "job_id": "ad2c19"
}
----

_Note: in the future the `event_id` may become an array of event IDs._

_Note: the `?trigger=id` and `?after=date` query params will soon be provided to make this polling
process somewhat more palatable._


## Elasticsearch and Percolation

Elasticsearch indexes are used to store the event types, the events, the triggers, and the alerts.

When a new trigger is added, it's condition is entered into the events index's percolation index.
When a new event is added, that percolation index is checked to see if any of the stored trigger
conditions match. For those triggers that do match, their jobs are executed.


## Command Line App

The service is started as a command line app:

[source,bash]
----
$ pz-workflow
----

## HTTP API

### `GET /`

Requests a "health check" for the service.

The returned status code is `200` and a body with a short, friendly text string.

### `POST /v2/eventType`

Sends an EventType to the workflow service.

The POST body is a JSON object:

[source,json]
----
{
    "name": STRING,
    "mapping": {
        "NAME" : STRING (datatype, see list below),
        ...
    }
}
----

The available data types are: `string`, `boolean`, `integer`, `double`, `date`, `float`, `byte`,
`short`, and `long`.

The return will be a 201 with the payload `{"id": STRING}`.

### `GET /v2/eventType`

Returns 200 with a payload of an array of all the event types registered.

This endpoint supports pagination, as described in [[General Pz Service Operations]].

### `GET /v2/eventType/:id`

Returns 200 with a payload of the event type with id of `:id`.

### `DELETE /v2/eventType/:id`

Deletes the event type with id `:id`, and returns 200 with no payload.


### `POST /v2/event`

The POST body is a JSON object:

[source,json]
----
{
    "eventtype_id": STRING (id of eventtype),
    "date": STRING (ISO timestamp),
    "data": {
        "PARAMETERNAME": VALUE,
        ...
    }
}
----

The return will be a 201 with the payload `{"id": STRING}`.

### `GET /v2/event`

Requests all the Events (of all EventTypes). Returns 200 with an array of `Event` objects.

This endpoint supports pagination, as described in [[General Pz Service Operations]].

### `GET /v2/event/:id`

Requests a specific Event with id of `:id` and EventType `:eventtype`. Returns 200 with the `Event` object.

### `DELETE /v2/event/:id`

Delete a specific Event and returns 200 with no payload.


### `POST /v2/alert`

Sends an Alert to the workflow service.

The POST body is a JSON object:

[source,json]
----
{
    "trigger_id": string,
    "event_id": string,
    "id": string,
    "job_id": string,
}
----

*Note:* use this for testing only; only the workflow service should generate alerts.

### `GET /v2/alert`

Requests all the Alerts.

This endpoint supports pagination, as described in [[General Pz Service Operations]].

Two query parameters are NOT YET supported that will filter the returned list:

* `trigger=id`: return only those Alerts with arising from the given Trigger
* `after=date` return only those Alerts that have happened since the given date

The returned value is an array of `Alert` objects of the form used by POST.

### `GET /v2/alert/:id`

Requests a specific Alert with id of `:id`. Returns 200 and the `Alert` object.

### `DELETE /v2/alert/:id`

Deletes the alert specified by the id value and returns 200 with no payload.

*Note:* use this for testing only; only the workflow service should delete alerts.


### `POST /v2/trigger`

Sends a Trigger to the workflow service.

The POST body is a JSON object:

[source,json]
----
{
    "title": short string,
    "condition": {
        "eventtype_id": event type id string,
        "query": {
            # Elasticsearch JSON query expression
        }
    },
    "job": {
        "userName": "string",
        "jobType": {
            "type": "string of either 'access', 'execute-service', or 'ingest'",
            "data": {
                "serviceId": "serviceId of the service to execute",
                "dataInputs": { raw json of the data to input},
                "dataOutput": [ { raw json of the data to output } ]
            }
        }
    }
}
----

### `GET /v2/trigger`

Requests all the Triggers. Returns 200 with an array of `Trigger` objects of the form used by POST.

This endpoint supports pagination, as described in [[General Pz Service Operations]].

### `GET /v2/trigger/:id`

Requests a Trigger with id of `:id`. Returns 200 with the `Trigger` object.

### `DELETE /v2/trigger/:id`

Whacks the trigger specified by the `:id` value and returns 200.


### Common operations

This service includes the common endpoints described in [[General Pz Service Operations]].

The `admin stats` supported are:

    {
        "starttime": "....",
    }

// vim: set syntax=asciidoc:
