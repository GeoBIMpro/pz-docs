# Workflow Service

The pz-workflow service enables the construction and use of "event" notifications to enable simple "if-this-happens-then-do-that" workflows.

A user will follow these general steps:

. Register a new event type
. Register a trigger for that event type
. Send an event
. Poll for new alerts
. Go to 3.


## The EventType

The user (or some service) first defines an `EventType` which is the "schema" for the events that the user will be generating. The `EventType` object is POSTed to `/eventType` and contains contains a `name` (string) and a map describing the event type's parameters.

The request payload looks like this:

[source,json]
----
{
    "name": "testevent-1468847218",
    "mapping": {
        "filename": "string",
        "code":     "string",
        "severity": "integer"
    }
}
----
The `name` must be unique across all event types.

The available data types are `string`, `boolean`, `integer`, `double`, `date`, `float`, `byte`, `short`, and `long`. (By no coincidence, these are the basic types that Elasticsearch supports.)

The response payload looks like this:

[source,json]
----
{
    "statusCode": 201,
    "type": "eventtype",
    "data": {
        "eventTypeId": "98fc25e8-bd97-4444-a972-c06aa0f0edf1",
        "name": "testevent-1468847218",
        "mapping": {
            "code": "string",
            "filename": "string",
            "severity": "integer"
        },
        "createdBy": "xyzzy",
        "createdOn": "2016-07-18T13:06:58.983944263Z",
    }
}
----


## The Trigger

The user then defines a `Trigger` which defines what action is to be taken when a specific event occurs. The `Trigger` is POSTed to `/trigger` and contains two parts, the `Condition` and the `Job`. The `Condition` defines what type of event is to be watched for and what the specific parameters of that event should be, expressed using Elasticsearch DSL query syntax against the parameters in the event type. The `Job` defines what action is to be taken, expressed as using Gateway/Dispatcher-style syntax.

The request payload looks like this:

[source,json]
----
{
    "title": "High Severity",
    "enabled": true,
    "condition": {
        "eventTypeIds": ["98fc25e8-bd97-4444-a972-c06aa0f0edf1"],
        "query": {
            "query": {
                "bool": {
                    "must": [
                        { "match": {"severity": 5} },
                        { "match": {"code": "PHONE"} }
                    ]
                }
            }
        }
    },
    "job": {
        "createdBy": "test",
        "jobType": {
            "type": "execute-service",
            "data": {
                "serviceId": "a2898bcb-2646-4ffd-9da7-2308cb7e77d7"
            }
        }
    }
}
----

`enabled` is a boolean value indicating whether the trigger should be "active" or not.

The caller supplies both the `eventTypeIds` and the `serviceId`.

In this example, the job will be executed only when an event of our previously defined `testevent-1468847218` event type occurs with its `severity` and `code` fields set to `5` and `"PHONE"`, respectively.

The response payload looks like this:

[source,json]
----
{
    "statusCode": 201,
    "type": "trigger",
    "data": {
        "triggerId": "6c9ce128-55c5-4aa0-80b2-a45f7f2bd367",
        "title": "High Severity",
        "condition": {
            "eventTypeIds": [
                "98fc25e8-bd97-4444-a972-c06aa0f0edf1"
            ],
            "query": {
                "query": {
                    "bool": {
                        "must": [
                        {
                            "match": {
                                "severity": 5
                            }
                        },
                        {
                            "match": {
                                "code": "PHONE"
                            }
                        }
                        ]
                    }
                }
            }
        },
        "job": {
            "createdBy": "test",
            "jobType": {
                "data": {
                    "serviceId": "a2898bcb-2646-4ffd-9da7-2308cb7e77d7"
                },
                "type": "execute-service"
            }
        },
        "percolationId": "6c9ce128-55c5-4aa0-80b2-a45f7f2bd367",
        "createdBy": "",
        "createdOn": "2016-07-18T13:11:51.163279767Z",
        "enabled": true
    }
}
----

## The Event

The user may generate an `Event` of that `EventType` to indicate some interesting condition has occurred. The `Event` object is POSTed to `/event` and contains the ID of the `EventType`, the date the event occurred, and the parameters of the event.

The request payload looks like this:

[source,json]
----
{
    "eventTypeId": "98fc25e8-bd97-4444-a972-c06aa0f0edf1",
    "data": {
        "filename": "dataset-c",
        "severity": 5,
        "code": "PHONE"
    }
}
----

The response payload looks like this:

[source,json]
----
{
    "statusCode": 201,
    "type": "event",
    "data": {
        "createdBy": "",
        "createdOn": "2016-07-18T13:20:17.520047787Z",
        "data": {
            "code": "PHONE",
            "filename": "dataset-c",
            "severity": 5
        },
        "eventId": "a765ea52-dac6-41e3-924e-19543f6f1100",
        "eventTypeId": "98fc25e8-bd97-4444-a972-c06aa0f0edf1"
    }
}
----

## The Alert

Whenever the condition of a `Trigger` is met, the system will create an `Alert` object. The user
can GET a list of alerts from `/alert`. The `Alert` object contains the ids of the `Trigger` that
was hit and the `Event` which caused it. It also contains the now ubiquitous system-generated ID,
and the id of the `Job` that was triggered by the event (note that at the current time, this is
sent as a JobRequest, which may or may not become an actual job if the request is malformed).


Users do not create Alerts, so we do not show a request payload example.

The response payload looks like this:

[source,json]
----
{
    "statusCode": 200,
    "type": "alert-list",
    "data": [{
        "alertId": "886af5eb-ad7e-4bc1-a4aa-4b7703d86a67",
        "triggerId": "9b2db9f6-7cc4-4bfc-a14f-0949c87d5df2",
        "eventId": "94043c8e-b154-4dbd-98ba-fff2847abe07",
        "jobId": "2f773e8a-79b4-4115-9164-01f2d170e6c6",
        "createdBy": "xyzzy",
        "createdOn": "2016-07-18T12:43:10.25478657Z"
    }],
    "pagination": {
        "count": 1,
        "page": 0,
        "perPage": 10,
        "sortBy": "alertId",
        "order": "asc"
    }
}
----

For `GET` requests, the `?triggerId=...` query parameter is supported to allow filtering the list.


## Elasticsearch and Percolation

Elasticsearch indexes are used to store the event types, the events, the triggers, and the alerts.

When a new trigger is added, it's condition is entered into the events index's percolation index. When a new event is added, that percolation index is checked to see if any of the stored trigger conditions match. For those triggers that do match, their jobs are executed.


## Command Line App

The service is started as a command line app:

    $ pz-workflow

## HTTP API

### `POST /eventType`

Sends an EventType to the workflow service.

The POST body is a JSON request object, as shown above.

The available data types are: `string`, `boolean`, `integer`, `double`, `date`, `float`, `byte`, `short`, and `long`.

The return will be a 201 with the response payload shown above.


### `GET /eventType`

Returns 200 with a payload of an array of all the event types registered.

This endpoint supports pagination, as described in the <<Pagination>> section.


### `GET /eventType/:id`

Returns 200 with a payload of the event type with id of `:id`.


### `DELETE /eventType/:id`

Deletes the event type with id `:id`, and returns 200 with no payload.

_Delete should not be used unless you know what you are doing._


### `POST /event`

The POST body is a JSON request object as shown above.

The return will be a 201 with the response payload shown above.


### `GET /event`

Requests all the Events (of all EventTypes). Returns 200 with an array of `Event` objects.

This endpoint supports pagination, as described in the <<Pagination>> section.


### `GET /event/:id`

Requests a specific Event with id of `:id` and EventType `:eventtype`. Returns 200 with the `Event` object.


### `DELETE /event/:id`

Delete a specific Event and returns 200 with no payload.

_Delete should not be used unless you know what you are doing._


### `POST /alert`

Sends an Alert to the workflow service.

_POST support is for testing only; only the workflow service should generate alerts._


### `GET /alert`

Requests all the Alerts.

This endpoint supports pagination, as described in the <<Pagination>> section.

The query parameter `triggerId=id` filters the response set to only those Alerts with arising from the given Trigger.

The returned value is an array of `Alert` objects of the form shown above.


### `GET /alert/:id`

Requests a specific Alert with id of `:id`. Returns 200 and the `Alert` object.


### `DELETE /alert/:id`

Deletes the alert specified by the id value and returns 200 with no payload.

_Delete should not be used unless you know what you are doing._



### `POST /trigger`

Sends a Trigger to the workflow service with a request payload as shown above.


### `GET /trigger`

Requests all the Triggers. Returns 200 with an array of `Trigger` objects of the form shown above.

This endpoint supports pagination, as described in the <<Pagination>> section.


### `GET /trigger/:id`

Requests a Trigger with id of `:id`. Returns 200 with the `Trigger` object.


### `DELETE /trigger/:id`

Whacks the trigger specified by the `:id` value and returns 200.

_Delete should not be used unless you know what you are doing._


### Common operations

This service includes the common endpoints described in the <<Common Endpoints>> section.

The response object for a "stats" request looks like this:

[source,json]
----
{
    "createdOn": "2006-01-02T15:04:05+07:00",
    "numAlerts": 123,
    "numConditions": 234,
    "numEvents": 345,
    "numTriggers": 456
}
----

// vim: set syntax=asciidoc wrap:
