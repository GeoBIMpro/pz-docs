# Pz Service Controller

The Piazza Core ServiceController manages and executes web services external to the Piazza core architecture (User Services).  It provides a REST API allowing developers to perform web service management activities.  The ServiceController also listens to Kafka topics dispatched from the Piazza Core Dispatcher, responds and handles web service management and execution Kafka messages.  Using the ServiceController, developers can:

. Register web services for search/discovery (See pz-search for details)
. Update information on the web service (e.g. URL, name, version and other metadata)
. Remove a web service from the registry
. View details about registered web services
. Execute a registered web service

The figure below shows the high level architecture of Piazza and how the ServiceController interacts with different components.

image::images/sc-architecture.png[title=“Service Controller in Piazza“]

## How to Use

### Prerequisites

The ServiceController, version 1.0, uses the following to build and run:

* http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html[Java Development Kit 1.8]
* https://maven.apache.org[Maven]
* https://www.mongodb.com/download-center[MongoDB]
* https://www.virtualbox.org/wiki/Downloads[Oracle VM VirtualBox] (for running the ServiceController on individual VMs)*
* https://www.vagrantup.com/downloads.html[Vagrant]*
* https://www.github.com/venicegeo/pz-uuidgen[pz-uuidgen]**
* https://www.github.com/venicegeo/pz-logger[pz-logger]**
* https://www.github.com/venicegeo/pz-alerter[pz-alerter]**
* https://www.github.com/venicegeo/pz-discover[pz-discover]**
* https://www.github.com/venicegeo/pz-gateway[pz-gateway]**
* https://www.github.com/venicegeo/pz-jobmanager[pz-jobmanager]**

_* Software needed to use Vagrant to standup a mock Piazza Core cluster_

_**These services are part of the Piazza Core. When these services are not available, the ServiceController defaults to standalone behavior._
## Obtaining the ServiceController
The repo containing the ServiceController is located in github at the following location: https://github.com/venicegeo/pz-servicecontroller
Clone this repo to obtain the latest copy.  The ServiceController can be built and run standalone or from within predefined virtual machines using Vagrant.

## Building the Source

Before using the ServiceController, decide whether you want to run the ServiceController with supporting Piazza Core Services and VirtualBox VMs (with MongoDB, Kafka, etc..), or if you want to run the ServiceController standalone.

### Standalone Option

To build the ServiceController, run
 _mvn clean install_ from the _**mainServiceController**_ directory.
This will build the ServiceController and produce an executable jar which is placed in the **mainServiceController/target** directory.

The name of the jar will be **_piazzaServiceController-(version number).BUILD-SNAPSHOT.jar_**.

### Vagrant

Start up a Windows PowerShell **as administrator**.  Navigate to the mainServiceController/conf directory.  Issue the command **Vagrant up**. This command will create the serviceregistry and serviceregistrydb VMs.

## Running the ServiceController

The ServiceController is a Spring Boot application and can be run directly from the command line.
It uses an _**application.properties**_ file which contains port, hostname, database name and other information used by the ServiceController.  When the Piazza Discover Service is not available, the Service Controller utilizes information in the application.properties file to connect to supporting services.

_**application.properties**_ files are located in the mainServiceController/conf directory.  To run the ServiceController, locally, you have to choose _**application-local.properties**_ and place it in the location that the ServiceController is started from, in the _src/main/resources_ directory or in the classpath used by the ServiceController.

When the Piazza [[Discover|Pz-Discover]] service is running and the location/api is specified in the application.properties file, the ServiceController uses the values registered in the Discover service to communicate with things such as Kafka, MongoDB and other Piazza Core Services.


**Values provided by the Discover service supersede values defined in the application.properties file. **

....
server.port=8082
servicecontroller.host=localhost
kafka.group=Test_Group
mongo.db.name=Piazza
mongo.db.collection.name=Services
core.discoverapi=/api/v1/resources
core.discoverservice=pz-discover.cf.piazzageo.io
core.db=/mongodb
core.kafka=/kafka
core.uuid=/pz-uuidgen
core.logger=/pz-logger
log4j.category.org.springframework=ERROR
logging.level.org.venice.piazza.servicecontroller=INFO
logging.level.org.springframework.web=INFO
endpoints.shutdown.enabled=true

# Values overwritten by pz-discover if not up then these are the defaults
core.uuidservice=localhost:12340/uuid
core.logservice=localhost:12341/log
kafka.host=localhost
kafka.port=9092
mongo.host=localhost
mongo.port=27017
....




To run the ServiceController from the _**mainServiceController/conf**_ directory, run the following command:

_> java –jar <path to the location of the servicecontroller.jar>/ piazzaServiceController-(version number).BUILD-SNAPSHOT.jar_

This will run the ServiceController, after initializing, the following message will be displayed:

`_o.v.p.servicecontroller.Application : Started Application in 8.994 seconds (JVM running for 9.658)_`

### Running with the Discover Service

For the ServiceController to be aware of where the Discover is located, the ServiceController has to be run by setting the _**core.discoverservice**_ property and _**core.discoverapi**_ property.  The _mainServiceController/conf_ directory contains the _**application-cf.properties**_ file which has these properties set to use the Discover service.


### Debugging

The ServiceController provides logging messages at an **INFO** level displaying informational messages that highlight the progress of the application at coarse-grained level.  To debug, the ServiceController, run the ServiceController specifying the _logging.level.org.venice.piazza.servicecontroller_ property as **DEBUG**

_>java -jar -Dlogging.level.org.venice.piazza.servicecontroller=DEBUG piazzaServiceController-(version number).BUILD-SNAPSHOT.jar_

When the Piazza core [[Logger|Pz-Logger]] service is available, the ServiceController uses it to log additional messages.

## Getting Started With the REST API

The ServiceController comes with some sample services to help with getting started with using the ServiceController API.
|===
| Jumpstart Service | Description | Example URL |
| toLower | Converts a string to lowercase. **POST** method | http://pz-servicecontroller.stage.geointservices.io/jumpstart/string/toLower?aString=testing |
| toUpper | Converts a string to uppercase. **POST** method | http://pz-servicecontroller.stage.geointservices.io/jumpstart/string/toUpper?aString=testing |
| convert | Converts a string to UPPER or LOWER case.  **POST** method | http://pz-servicecontroller.stage.geointservices.io/jumpstart/string/convert { "theString":"testing", "conversionType":"UPPER"} |
| moviequotewelcome | Takes an optional name as a parameter and provides a movie quote greeting to ServiceController users.  **GET** method | hhttp://pz-servicecontroller.stage.geointservices.io/jumpstart/moviequotewelcome?name=Marge or http://pz-servicecontroller.stage.geointservices.io/jumpstart/moviequotewelcome |
|===


To become familiar with the ServiceController, use data transfer tools such as **cURL** or UI data transfer tools such as **Postman** ( https://www.getpostman.com/) to interact with the ServiceController REST API.

The API and end points  used for working with the ServiceController are documented in Swagger at: http://pz-swagger.venicegeo.io/#!/Service

Metadata about Piazza Core Resources are represented as _**ResourceMetadata**_ within the Piazza Core.  Please look at the ResourceMetadata model, documented as part of registering a user service, in swagger ( http://pz-swagger.venicegeo.io/#!/Service/post_service) for descriptions of these metadata fields.

The following examples on registering and executing user services are the payloads for interacting directly with the ServiceController.  These same payloads can also be used within registration and execution requests going through the Gateway.   Refer to the Swagger API documentation and the <<_gateway_api>> section of this document to determine what additional items need to be specified.


### Registering a User Service

Before the ServiceController can manage a user service, the service has to be registered. To do this, utilize the ServiceController's _**registerService**_ service passing in ResourceMetadata JSON.  As of now, there are no mandatory fields, but at a bare minimum register enough information so that other developers can discover and use the service.

#### Registering a User Service that uses POST with Query Parameters

Piazza user services register user services using the following endpoint: https://pz-gateway.venicegeo.io/service
Piazza developers can build and test registering user services using localhost.  When running or testing the ServiceController internally, the following endpoint can be used:  https://<the-hostname-you-are-running-from>/servicecontroller/registerService.

Below is an example of how to register a web service that uses the **POST** method, specifies the input parameters via URL key value pairs - in this case using the parameter aString.  This example registers the toLower Service:
https://pz-gateway.venicegeo.io/service
[source,json]
----
{
	"url":"http://pz-servicecontroller.venicegeo.io/jumpstart/string/toLower",
	"contractUrl":"http://pz-servicecontroller.cf.piazzageo.io/toLowerContract",
        "method":"POST",
	 "resourceMetadata" : {
	  	"name":"The toLower Service",
		"description":"Service to convert string to lower case"
	}
}
----

The response from the ServiceController will be a JSON message providing the serviceId for the toLower Service.

[source,json]
----
{
  "type": "service-id“,
  "serviceId": "304e4ef3-f6a0-4f91-98c3-447a4f62d0af"
}

----
_Once registered, users, should utilize the serviceId to perform any functions on the registered service._

_**If you receive a response with an empty serviceId, it may mean that the service was not properly registered within the ServiceController.  Be sure MongoDB and other required software is up and running.**_

#### Registering a User Service that uses POST with JSON Payload

To register a service that uses the **POST** method requiring JSON as the RequestBody, send the following payload to the registerService:

[source,json]
----
{
	"url":"http://pz-servicecontroller.venicegeo.io/jumpstart/string/convert",
	"contractUrl":"http://pz-servicecontroller.cf.piazzageo.io/convertContract",
	"method":"POST",
	"resourceMetadata" : {
		"name":"The toLower Service",
		"description":"Service to convert string to upper or lower case"

	}
}
----

#### Registering a User Service that uses GET without any parameters
To register a service that uses the **GET** example without URL parameters (as per a "pure" REST case), the process is the same but be sure to specify **GET** as the method.

[source,json]
----
{

	"url":"http://pz-servicecontroller.venicegeo.io//jumpstart/moviequotewelcome",
       "contractUrl":"http://pz-servicecontroller.cf.piazzageo.io/jumpstart/moviequotewelcomeContract",
	"method":"GET”,
	"resourceMetadata" : {
		"name":"Movie Quote Welcome",
		 "description":"A web service that welcomes you to pz-servicecontroller"
	}

}
----
### Executing a Service

To execute a service, utilize the ServiceController's _**executeService**_ API.  Below is an example of how to execute the toLower service that was registered in the previous section.

[source,json]
----
{
  "serviceId" : "{{serviceId}}",
  "dataInputs" : {
    "aString" : {
      "type" : "urlparameter",
      "content" : "The rain in Spain"
    },
    "dataOutput" : [
        {
            "mimeType" : "application/json",
            "type" : "text"
        }
    ]
  }
}
----

The response will be:

[source,json]
----
<200 OK,{"result":"it is raining today."},{Server=[Apache-Coyote/1.1], Content-Type=[application/json;charset=UTF-8], Content-Length=[33], Date=[Tue, 19 Jan 2016 13:27:33 GMT]}>
----

Executing the _moviequotewelcome_ previously registered would be done as follows:

[source,json]
----
{
  "serviceId" : “{{serviceId}}”,
  "dataInputs" : {},
  "dataOutput" : [
        {
            "mimeType" : "application/json",
            "type" : "text"
        }
    ]
}
----

The response will be:

[source,json]
----
<200 OK,{"message":"I'm Ron Burgandyyyy?

Welcome to the piazza pz-servicecontroller!
Details on using pz-servicecontrollers are located on the github venice wiki!
"},{Server=[Apache-Coyote/1.1], Content-Type=[application/json;charset=UTF-8], Content-Length=[140], Date=[Tue, 19 Jan 2016 13:31:17 GMT]}>
----

#### Executing a Service Sending JSON

To execute the convert service, do the following:

[source,json]
----
{
  "serviceId" : “{{serviceId}}”,
  "dataInputs" : {
    "" : {
      "content" : "{\"theString\":\"MARGE test\", \"conversionType\":\"UPPER\"}",
      "type" : "body",
      "mimeType" : "application/json"
    },
    "dataOutput" : [
        {
            "mimeType" : "application/json",
            "type" : "text"
        }
    ]
  }
}
----


### Getting Description of a User Service
To get a description of a user service registered with Piazza perform the following call:
**GET**
----
 https://pz-servicecontroller.int.geointservices.io/service/{{serviceId}}
----

The response will be the metadata associated with the specified serviceId.

### Getting a List of Registered User Services

To get a list of the user services registered with Piazza, perform the following call:
**GET**
----
 https://pz-servicecontroller.int.geointservices.io/service/
----
The response will be a service-list containing metadata for each of the registered user services.


### General Pz Service Operations

The Pz ServiceController supports other Pz Service Operations..

**GET /**  on http://pz-servicecontroller.venicegeo.io/
Provides a health check on Pz-ServiceController.
If the Pz-ServiceController is running you should see the following response:

....
Welcome from the Piazza Service Controller.
For details on running and using the ServiceController,
see Pz Service Controller for details.
....

**GET /admin/stats**   on http://pz-servicecontroller.venicegeo.io/
Provides statistics on the Pz-ServiceController.

....
{"mem":382464,"mem.free":159813,"processors":2,"instance.uptime":18151962,"uptime":18166991,"systemload.average":1.05,"heap.committed":382464,"heap.init":382976,"heap.used":222650,"heap":382464,"threads.peak":31,"threads.daemon":27,"threads.totalStarted":37,"threads":31,"classes":11529,"classes.loaded":11529,"classes.unloaded":0,"gc.ps_scavenge.count":4900,"gc.ps_scavenge.time":13789,"gc.ps_marksweep.count":0,"gc.ps_marksweep.time":0,"httpsessions.max":-1,"httpsessions.active":0,"gauge.response.admin.stats":7.0,"gauge.response.root":102.0,"counter.status.200.root":1,"counter.status.302.admin.stats":1}
....

// vim: set syntax=asciidoc wrap:
