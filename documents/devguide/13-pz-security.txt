# pz-security

The Piazza Core Pz-Security project is an internal component that provides REST endpoints for authenticating users, and creating, updating, and deleting user and role data.

## Running Locally

To run the pz-security REST endpoints locally, run the following commands to retrieve the project from git and start a Tomcat server hosting the web service:

    git clone git@github.com:venicegeo/pz-security.git
    mvn clean install -U spring-boot:run

The Tomcat server will be listening on port 8080. The roles are stored in a file: `src/main/resources/roles.txt`. To prevent this file from being overwritten with the default values every time the pz-security application runs, do the following:

. Copy the file to a readable and writable location on the filesystem, e.g., `/data/roles.txt`
. Update the `pz.security.fileurl` property in the `src/main/resources/application.properties` file with this new location.

## Code Organization

The Pz-Security project uses a series of Spring RestControllers in order to manage the number of REST Endpoints that the Pz-Security API provides. These are located in the org.venice.piazza.security.controller package, and are broken up into separate objects by their functionality.

## Endpoints

The REST service has the following endpoints:

### Retrieving Data:

Returns the usernames of all users defined:

    GET /users

Example output:

    [
      "johnsmith",
      "jimdugan",
      "samwinston"
    ]

Returns the roles for the username provided in the URL parameter:

    GET /users/<username>/roles

Example output:

    [
      "abort",
      "access",
      "admin-stats",
      "delete-service",
      "execute-service",
      "get",
      "get-resource",
      "ingest",
      "list-service",
      "read-service",
      "register-service",
      "search-service",
      "update-service"
    ]

Returns the usernames of all users defined, along with the roles for that user:

    GET /users/roles

Example output:

    {
      "johnsmith": "abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service",
      "jimdugan": "abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service",
      "samwinston": "abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service"
    }

### Adding Data:

Adds a list of one or more usernames and their respective roles

    POST /users/roles

Example payload:

    {
      "russellbertrand": "abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service",
      "davidthomas": "abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service"
    }

Example output:

    {
      "Successes": [
        "User 'russellbertrand' inserted with roles: abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service",
        "User 'davidthomas' inserted with roles: abort,access,admin-stats,delete-service,execute-service,get,get-resource,ingest,list-service,read-service,register-service,search-service,update-service"
      ],
      "Failures": []
    }

Adds a list of one or more usernames to the system

    POST /users

Example payload:

    [
      "larrycable",
      "davidcopperfield",
      "jimbobarnes"
    ]

Example output:

    {
      "Successes": [
        "User 'larrycable' inserted with no roles.",
        "User 'davidcopperfield' inserted with no roles.",
        "User 'jimbobarnes' inserted with no roles."
      ],
      "Failures": []
    }

### Updating Data:

Replaces a users list of assigned roles with the roles provided, erasing any previously assigned roles:

    PUT /users/{userid}/roles

Example payload:

    ["get","ingest"]

Example output:

    {
      "Status": "User 'larrycable' updated with roles: [get, ingest]"
    }

### Deleting Data:

Deletes a single role from a users list of assigned roles:

    DELETE /users/{userid}/roles/{role}

Example output:

    {
      "Status": "Role 'ingest' deleted for user 'larrycable'"
    }

Deletes a user, and all assigned roles:

    DELETE /users/{userid}

Example output:

    {
      "Status": "User 'larrycable' deleted."
    }

### Mock Authentication Service:

Returns an authentication decision (true or false) based on the provided username and credential:

    POST /verification

Example payload:

    {
      "username":"mcmahonhenry",
      "credential":"credential"
    }

Example output:

    true

// vim: set syntax=asciidoc wrap:
