# pz-dispatcher

Internal component designed to handle the relaying of messages between the Gateway and internal Piazza components; and between internal Piazza components.

## Vagrant

*Note*: Vagrant setup will fail because the Nexus credentials are not injected. If you want Vagrant to work, you will have to update the Maven settings on the Vagrant box to include the Nexus repository with your credentials. In the mean time, please run this component locally. 

Run ``vagrant up`` to start the Dispatcher service. This machine's functionality depends on the [Gateway](https://github.com/venicegeo/pz-gateway) and [Job Manager](https://github.com/venicegeo/pz-jobmanager) components also being running their own Vagrant machines. For Kafka messaging, the [Kafka Devbox](https://github.com/venicegeo/kafka-devbox) is also required to be running. 

## Running Locally

To run the Dispatcher service locally (without Vagrant), perhaps through Eclipse or through CLI, navigate to the project directory and run ``mvn clean install -U spring-boot:run``. This will run a Tomcat server locally with the Dispatcher service running on port 8082. If you are also running the Job Manager locally (and not through Vagrant) you will also have to override the host name parameter ``jobmanager.host`` as ``localhost``. 

## Interface

The Gateway contains a REST interface for the submission and polling of Jobs. However, the Dispatcher does not contain such a REST Endpoint. The interaction with the Dispatcher amongst internal components is done purely through Kafka messaging - with the exception of synchronous requests, such as fetching the Job Status or fetching Resource Metadata. For these synchronous requests, the Dispatcher *does* contain REST endpoints that will be called by the Gateway. These Dispatcher REST endpoints are *NOT* intended to be called by any entity other than the Gateway, and will likely be locked down as such in production scenarios. See the [Job Status](https://github.com/venicegeo/venice/wiki/Pz-Dispatcher#job-status) section for more details on this.

### Kafka Messages

* Relaying Gateway Jobs

** The primary function of the Dispatcher is to relay Job and Status Requests from external users sent into the Gateway. These messages are simply relayed from the Dispatcher to the Job Manager or other appropriate internal component.

** The Kafka messages simply contain the JSON Payload of the request. For information on the JSON Payload of these requests, see the [Gateway](https://github.com/venicegeo/pz-gateway) documentation.

* Worker Component Subscriptions

** For an owner of a Worker component in Piazza; that is, for any internal component in Piazza that is going to be consuming Job Messages; the Topics that are required to be subscribed to are dependent on the type of the Job as defined in the `pz-jobcommon` repositories `Model.Job.Type` package. Every Job that is passed into the Gateway must have an accompanying POJO Model defined in `Model.Job.Type` package under the `pz-jobcommon` repository, and Models in this package must implement the `PiazzaJobType` interface. As part of that interface, one must define a `type` String that uniquely denotes this Job Type from all others. For example, within the [Ingest Job Type](https://github.com/venicegeo/pz-jobcommon/blob/master/src/main/java/model/job/type/IngestJob.java) the type is defined as `ingest`. This Job Type corresponds with the Topic name that the Ingest component must subscribe to in order to receive Jobs with this type. For example, in the `pz-ingest` Worker thread, the Kafka consumer subscribes to the following Topic as such: `consumer.subscribe(Arrays.asList("ingest"));`

** In summary, if you are the owner of an internal Piazza component, and you wish to define your Job Type and then subscribe to the Kafka Topic for when this Job type is submitted, you need to perform the following code modifications:

*** Add an appropriate Model in the `pz-jobcommon` project to the `Model.Job.Type` package. Have this Model implement the `PiazzaJobType` interface.
*** In the `Model.Job.PiazzaJobType` interface, add `@Type` information for serializing your Job Type (see existing `@Types` in this file for how to do this.). 
*** Create a Consumer in your Worker component, and subscribe to the type name you have defined in the first bullet point.
*** The ConsumerRecord received can be deserialized into the `Model.Job.Job` object, which will contain a reference to the PiazzaJobType you have defined in the first bullet point. 

### Job Status

Because all Jobs are asynchronous, then they are relayed through Kafka messaging. However, external users who query the Gateway for Job Status will expect for a response to be returned immediately without the spawning of a new Job. For this single case where synchronous behavior is desired, the Dispatcher also exposed a single REST endpoint for the querying of Job status. This follows the URL pattern of http://dispatcher.dev:8082/job/JOB_ID. Requests to the Gateway for Job Status will route to this REST endpoint. In turn, the Dispatcher will then relay that message to the REST Endpoint of the [Job Manager](https://github.com/venicegeo/pz-jobmanager) in order to synchronously get the status of that Job from the database.

## Administrative API

The Dispatcher contains some REST Endpoints that can be used to query an individual instance of this component for run-time statistics.

* Administrative Statistics -- `GET /admin/stats`

** Return object containing information regarding the running instance of this component. 
