#!/usr/bin/groovy

node {
  def root = pwd()
  def mvn = tool 'M3'
  def zapHome = tool 'ZAProxy_v2_5_0'
  def nodejs = tool 'NodeJS_6'

  stage("Setup") {
    deleteDir()
    sh "rm -rf /jslave/.conda/"
    sh "rm -rf /jslave/.condarc"
    // github is open gitlab requires credentials to clone
    if(env.GITLAB_CREDS) {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
    } else {
      git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
    }
    sh "curl -L https://repo.continuum.io/miniconda/Miniconda2-4.3.21-Linux-x86_64.sh -o miniconda.sh"
    sh "bash miniconda.sh -b -p ${root}/miniconda2"
    sh "rm miniconda.sh"
    withEnv(["CONDA_HOME=${root}/miniconda2")] {
      sh "$CONDA_HOME/bin/conda create --name pz-docs -y"
      sh "$CONDA_HOME/bin/conda config --add channels conda-forge"
      sh "$CONDA_HOME/bin/conda install mkdocs" 
    }
  }

  def appvers = sh(script: "git describe --long --tags --always | sed 's/\\./-/'g", returnStdout: true)
  appvers = appvers.trim()
  def appName = "pz-docs-${appvers}"

  stage("Build") {
    withEnv(["CONDA_HOME=${root}/miniconda2")] {
      sh "$CONDA_HOME/bin/mkdocs --help"
      sh "$CONDA_HOME/bin/mkdocs --version"
    }
  }
}

